import java.util.NoSuchElementException;

class PriorityQueueNode<T> {
    T data;
    int priority;
    PriorityQueueNode<T> prev;
    PriorityQueueNode<T> next;

    public PriorityQueueNode(T data, int priority) {
        this.data = data;
        this.priority = priority;
        this.prev = null;
        this.next = null;
    }
}

class PriorityQueue<T> {
    private PriorityQueueNode<T> head;
    private PriorityQueueNode<T> tail;

    public PriorityQueue() {
        this.head = null;
        this.tail = null;
    }

    // Method to insert a new element based on its priority
    public void insert(T data, int priority) {
        PriorityQueueNode<T> newNode = new PriorityQueueNode<>(data, priority);

        if (head == null) {
            head = tail = newNode;
        } else if (priority < head.priority) {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        } else {
            PriorityQueueNode<T> current = head;
            while (current.next != null && current.next.priority <= priority) {
                current = current.next;
            }
            newNode.next = current.next;
            newNode.prev = current;
            if (current.next != null) {
                current.next.prev = newNode;
            } else {
                tail = newNode;
            }
            current.next = newNode;
        }
    }

    // Method to delete the element with the highest priority
    public T delete() {
        if (head == null) {
            throw new NoSuchElementException("Priority queue is empty");
        }
        T data = head.data;
        head = head.next;
        if (head != null) {
            head.prev = null;
        } else {
            tail = null;
        }
        return data;
    }

    // Method to get the element with the highest priority without removing it
    public T peek() {
        if (head == null) {
            throw new NoSuchElementException("Priority queue is empty");
        }
        return head.data;
    }

    // Method to check if the priority queue is empty
    public boolean isEmpty() {
        return head == null;
    }
}

public class Main {
    public static void main(String[] args) {
        PriorityQueue<String> priorityQueue = new PriorityQueue<>();
        priorityQueue.insert("Task A", 3);
        priorityQueue.insert("Task B", 1);
        priorityQueue.insert("Task C", 2);

        System.out.println("Highest-priority task: " + priorityQueue.peek());
        while (!priorityQueue.isEmpty()) {
            System.out.println("Executing: " + priorityQueue.delete());
        }
    }
}
