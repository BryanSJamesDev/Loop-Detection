import java.util.Stack;

public class StackPermutationChecker {
    // Method to check if the target permutation is achievable using stack operations
    public static boolean isStackPermutation(int[] original, int[] target) {
        Stack<Integer> stack = new Stack<>();
        int targetIndex = 0;

        // Traverse original array to simulate stack operations
        for (int num : original) {
            stack.push(num);  // Push current element onto the stack

            // Check and pop the stack if the top matches the current target element
            while (!stack.isEmpty() && stack.peek() == target[targetIndex]) {
                stack.pop();
                targetIndex++;  // Move to the next element in the target array
            }
        }

        // If all elements matched and the stack is empty, then it is a valid permutation
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        int[] original = {1, 2, 3};
        int[] target = {2, 1, 3};

        // Check if the target permutation is achievable
        boolean result = isStackPermutation(original, target);
        System.out.println("Is it a stack permutation? " + result);
    }
}


