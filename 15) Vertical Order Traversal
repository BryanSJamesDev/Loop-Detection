import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
        left = null;
        right = null;
    }
}

public class VerticalOrderTraversal { // Ensure the class name matches with the public class containing main.
    // Helper class to hold the TreeNode along with its horizontal distance
    static class NodeInfo {
        TreeNode node;
        int hd;

        NodeInfo(TreeNode node, int hd) {
            this.node = node;
            this.hd = hd;
        }
    }

    // Function to perform vertical order traversal of the binary tree
    public static List<List<Integer>> verticalOrderTraversal(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        Map<Integer, List<Integer>> map = new TreeMap<>();
        Queue<NodeInfo> queue = new LinkedList<>();

        queue.offer(new NodeInfo(root, 0));

        while (!queue.isEmpty()) {
            NodeInfo info = queue.poll();
            map.computeIfAbsent(info.hd, k -> new ArrayList<>()).add(info.node.val);

            if (info.node.left != null) {
                queue.offer(new NodeInfo(info.node.left, info.hd - 1));
            }
            if (info.node.right != null) {
                queue.offer(new NodeInfo(info.node.right, info.hd + 1));
            }
        }

        // Extracting the sorted columns and their corresponding values
        for (List<Integer> values : map.values()) {
            result.add(values);
        }
        return result;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        List<List<Integer>> verticalOrderResult = verticalOrderTraversal(root);
        System.out.println("Vertical Order Traversal:");
        for (List<Integer> column : verticalOrderResult) {
            System.out.println(column);
        }
    }
}
