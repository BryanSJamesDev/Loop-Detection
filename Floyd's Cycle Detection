import java.util.*;

// Definition of the Node class for the linked list
class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

// Definition of the LinkedList class
public class LinkedList {
    Node head;  // head of list

    // Method to insert a new node at the front of the list
    public void push(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }

    // Method to detect loop using Floyd's Cycle Detection algorithm
    public boolean detectLoop() {
        Node slow = head, fast = head;
        while (slow != null && fast != null && fast.next != null) {
            slow = slow.next;            // move slow by one
            fast = fast.next.next;       // move fast by two

            if (slow == fast) {
                return true;  // Loop found
            }
        }
        return false;  // No loop found
    }

    // Main method to drive the program
    public static void main(String[] args) {
        LinkedList llist = new LinkedList();

        // Adding nodes to the list
        llist.push(20);
        llist.push(4);
        llist.push(15);
        llist.push(10);

        // Creating a loop for testing
        llist.head.next.next.next.next = llist.head;

        // Detect loop
        if (llist.detectLoop())
            System.out.println("Loop Detected");
        else
            System.out.println("No Loop Detected");
    }
}
