import java.util.Stack;
import java.util.Arrays;

public class StockSpanSolver {
    // Method to calculate stock spans using the stack-based approach
    public int[] calculateSpan(int[] prices) {
        int n = prices.length;
        int[] spans = new int[n];
        Stack<Integer> stack = new Stack<>();

        // The span of the first day is always 1.
        spans[0] = 1;
        stack.push(0);

        for (int i = 1; i < n; i++) {
            // Pop elements from the stack while the current price is greater than the price at the top of the stack
            while (!stack.isEmpty() && prices[i] >= prices[stack.peek()]) {
                stack.pop();
            }

            // If the stack is empty, the span is the current index plus 1
            // If not empty, the span is the difference between the current index and the index at the top of the stack
            spans[i] = stack.isEmpty() ? i + 1 : i - stack.peek();

            // Push the current index onto the stack
            stack.push(i);
        }

        return spans;
    }

    public static void main(String[] args) {
        StockSpanSolver calculator = new StockSpanSolver();
        int[] stockPrices = {100, 80, 60, 70, 60, 75, 85};
        int[] spans = calculator.calculateSpan(stockPrices);

        System.out.println("Stock Prices: " + Arrays.toString(stockPrices));
        System.out.println("Stock Spans:   " + Arrays.toString(spans));
    }
}
