import java.util.Scanner;

// Node class for a doubly linked list
class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

// LinkedList class to handle merge sort operations
class LinkedList {
    Node head;

    // Method to add a node to the end of the list
    void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
            newNode.prev = current;
        }
    }

    // Method to find the middle of the linked list
    static Node findMiddle(Node head) {
        Node slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // Method to merge two halves of a linked list
    static Node merge(Node left, Node right) {
        if (left == null) return right;
        if (right == null) return left;

        if (left.data < right.data) {
            left.next = merge(left.next, right);
            left.next.prev = left;
            left.prev = null;
            return left;
        } else {
            right.next = merge(left, right.next);
            right.next.prev = right;
            right.prev = null;
            return right;
        }
    }

    // Recursive method to perform merge sort
    static Node mergeSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node middle = findMiddle(head);
        Node nextOfMiddle = middle.next;

        middle.next = null; // Split the list into two halves
        nextOfMiddle.prev = null;

        // Apply mergeSort on left list
        Node left = mergeSort(head);

        // Apply mergeSort on right list
        Node right = mergeSort(nextOfMiddle);

        // Merge the sorted left and right halves
        return merge(left, right);
    }

    // Utility method to print the linked list
    void printList(Node node) {
        Node current = node;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

// Main class to run the program
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the number of elements: ");
        int n = input.nextInt();
        LinkedList list = new LinkedList();
        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++) {
            list.add(input.nextInt());
        }
        input.close();

        System.out.println("Original list:");
        list.printList(list.head);

        list.head = LinkedList.mergeSort(list.head);

        System.out.println("Sorted list:");
        list.printList(list.head);
    }
}

